<h1>互動式範例</h1>
<p><img alt="" height="390" src="/images/u41604186783387245421fm173app49fJPEG-1.jpeg" width="637"/></p>
<p>content 1</p>
<p></p>
<p><button onclick="myFunction()">按一下</button></p>
<p id="demo"></p>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*50 + 1);
  //document.getElementById("demo").innerHTML = "不要亂按";
 //alert("不要亂按")
}
</script>
<script type="text/javascript">
var cwidth = 400;
    var cheight = 300;
    var dicex = 50;
    var dicey = 50;
    var dicewidth = 100;
    var diceheight = 100;
    var dotrad = 6;
    var ctx;
    var dx;
    var dy;
    var firstturn = true;
    var point;
function throwdice() {
    var sum;
    var ch = 1+Math.floor(Math.random()*6);
    sum = ch;
    dx = dicex;
    dy = dicey;
    drawface(ch);
    dx = dicex + 150;
    ch=1 + Math.floor(Math.random()*6);
    sum += ch;
    drawface(ch);
    if (firstturn) {
        switch(sum) {
            case 7:
            case 11:
              document.f.outcome.value="You win!";
              break;
            case 2:
            case 3:
            case 12:
              document.f.outcome.value="You lose!";
              break;
            default:
              point = sum;
              document.f.pv.value=point;
              firstturn = false;
              document.f.stage.value="Need follow-up throw.";
              document.f.outcome.value="   ";
        }
    }
    else {
        switch(sum) {
        case point:
           document.f.outcome.value="You win!";
           document.f.stage.value="Back to first throw.";
           document.f.pv.value=" ";
           firstturn = true;
           break;
        case 7:
           document.f.outcome.value="You lose!";
           document.f.stage.value="Back to first throw.";
           document.f.pv.value=" ";
           firstturn = true;
        }
            }
}
function drawface(n) {
  ctx = document.getElementById('canvas').getContext('2d');  
  ctx.lineWidth = 5;
  ctx.clearRect(dx,dy,dicewidth,diceheight);
  ctx.strokeRect(dx,dy,dicewidth,diceheight)
  var dotx;
  var doty;
  ctx.fillStyle = "#009966";
    switch(n) {
        case 1:
         draw1();
         break;
        case 2:
         draw2();
         break;
        case 3:
         draw2();
         draw1();
         break;
        case 4:
         draw4();
         break;
        case 5:
         draw4();
         draw1();
         break;
        case 6:
         draw4();
         draw2mid();
         break;
         
    }
}
function draw1() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + .5*dicewidth;
    doty = dy + .5*diceheight;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
function draw2() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+diceheight-3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
function draw4() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+diceheight-3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + diceheight-3*dotrad;  //no change
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+ 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill(); 
}
function draw2mid() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + .5*diceheight;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy + .5*diceheight; //no change
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
</script>
<p><canvas height="300" id="canvas" width="400"> Your browser doesn't support the HTML5 element canvas. </canvas> <br/> <button onclick="throwdice();">Throw dice </button></p>
<form id="f" name="f">Stage: <input name="stage" type="text" value="First Throw"/> Point: <input name="pv" type="text" value="   "/> Outcome: <input name="outcome" type="text" value="     "/></form><h1>roc flag</h1>
<p><img alt="" height="500" src="/images/f4.jpg" width="1000"/></p>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea2" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea2"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(0, 0, 110)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 50)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0,269)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script><h1>期末報告說明</h1>
<p><img alt="" height="206" src="/images/images.jpg" width="245"/></p>
<p>請各組在各自的網站中將期中之前的 content.htm 各 H 標註各自加 1 後內縮在本頁最後一個頁面, 並將標題設為" 期中報告"</p>
<p>各組組員請依照各頁面主題, 分別利用各自帳號下的 CMSimfly, Reveal 與 Pelican (Blogger) 內容, 引用至各相關頁面外, 再分別依據各頁面所執行的操作內容, 拍成影音說明影片, 以"國立虎尾科技大學-機械設計工程系-網際內容管理-學號-影片主題"為名稱, 上傳到各自的 Youtube 帳號下後, 嵌入到下列各頁面中, 以作為期末課程評分依據.</p>
<p>各學員將資料推送到各組網站時, 必須引用 Github 上版本提交號或連結, 並在影片內容中提供相關資料的說明與連結.</p>
<p>網路連線設定</p>
<p>配置可攜程式環境</p>
<p>倉儲改版</p>
<p>靜態 CMSimfly</p>
<p>Mobile 網站內容</p>
<p>Virtual Host</p>
<h1>資料來源</h1>
<p>http://cpgx.kmol.info/wcm2019/content/index.html</p><h1>第15周</h1>
<p><strong>建立 Ubuntu 虛擬主機，完成設定</strong></p>
<p><img alt="" height="424" src="/images/chrome_YDpq5kd6tC.png" width="372"/></p>
<p><strong>記憶體大小為<span style="color: #3366ff;">4096MB</span></strong></p>
<p><img alt="" height="412" src="/images/chrome_QWHZ7aRfkO.png" width="359"/></p>
<p><strong>選創一個新的</strong></p>
<p><img alt="" height="410" src="/images/chrome_6DhWuPx5AW.png" width="364"/></p>
<p><span>ub的大小拖拉至</span><span style="color: #ff0000;">500.00GB</span></p>
<p><img alt="" height="342" src="/images/chrome_dFyPaLEooV.png" width="473"/></p>
<p><strong>選擇的檔案為<span style="color: #ff0000;">存到隨身碟的ubuntu18.04檔案</span></strong></p>
<p><img alt="" height="350" src="/images/chrome_fgX1Z0eYA5.png" width="618"/></p>
<p><span style="color: #ff00ff;"><strong>以網路卡橋接啟動 Ubuntu 伺服器</strong></span></p>
<p><img alt="" height="369" src="/images/chrome_oh8rZ9VdxT.png" width="528"/></p>
<p><strong>以<span style="color: #ff0000;"> sudo apt install nginx</span> 安裝 <span style="color: #ff0000;">nginx WWW 伺服器</span></strong></p>
<p><img alt="" height="600" src="/images/kelu.png" width="1000"/></p>
<p><strong>以 <span style="color: #ff0000;">Windows 10 下的 Filezilla client,</span> 將編輯好的<span style="color: #ff0000;"> nginx 設定檔案送到 Ubuntu</span></strong></p>
<p><img alt="" height="652" src="/images/chrome_L6y7uAnRcB.png" width="818"/></p>
<p><img alt="" height="1080" src="/images/ypn.png" width="1920"/></p>
<p><img alt="" height="600" src="/images/dudu.png" width="800"/></p><h2>本課程目標</h2>
<p><img alt="" height="698" src="/images/6699.png" width="724"/></p><h1>期末報告</h1>
<p><strong>github 金鑰</strong></p>
<p><img alt="" height="302" src="/images/chrome_rceiAwMSXL.png" width="1042"/></p>
<p><strong>github 倉儲改版</strong></p>
<p><img alt="" height="960" src="/images/chrome_tT9Cr499Uy.png" width="1241"/></p>
<p><strong>github 倉儲內容</strong></p>
<p><img alt="" height="960" src="/images/chrome_Fp07UNbKIV.png" width="1920"/></p>
<p><img alt="" height="960" src="/images/chrome_QCNaTN7fnG.png" width="1969"/></p>
<p>申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲.</p>
<p><img alt="" height="960" src="/images/chrome_ZdOYCbYNiu.png" width="1774"/></p>
<h2>倉儲改版</h2>
<p><span>建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版</span><br/><span></span></p>
<p><span>可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 執行 git 指令.</span><br/><br/><span>建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以<span style="color: #ff0000;"> git clone 加上倉儲連線 URL, 將倉儲clone一份到近端</span>, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 <span style="color: #ff0000;">git add, commit 與 push 對遠端倉儲改版.</span></span><br/><br/><span>另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以<span style="color: #ff0000;"> git remote add 設法在近端倉儲中納入 origin URL</span> 後, 將近端倉儲版本新增提交推送到遠端.</span></p>
<p><span><img alt="" height="901" src="/images/explorer_d9GxjFL6Ep.png" width="1048"/></span></p>
<p><span><img alt="" height="480" src="/images/cmd_hpNdh3OF8d.png" width="960"/></span></p>
<p><span></span></p><h2>網路連線設定</h2>
<p>了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括<span style="color: #ff0000;"> IPv4 網路</span>與<span style="color: #ff0000;"> IPv6 網路設定.</span> 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的<span style="color: #ff0000;"> DHCP 與 NAT 上網</span>, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常<span style="color: #ff00ff;">必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢</span>, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定.</p>
<p><img alt="" height="1080" src="/images/66.png" width="1920"/></p>
<p><img alt="" height="533" src="/images/dllhost_gyZBfHdy7v.png" width="421"/></p><h1>期中影片</h1>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="721" src="https://www.youtube.com/embed/xEWNtwFFasE" width="1154"></iframe></p>
<h1>期末影片</h1>